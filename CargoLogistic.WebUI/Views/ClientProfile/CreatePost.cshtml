@model CargoLogistic.WebUI.Models.CreatePostCargoDto
@using CargoLogistic.Domain.Entities

@{
    ViewBag.Title = "CreatePost";
}

<script type="text/javascript">

    $(document).ready(function() {
        $("#localityFrom").prop("disabled", false);
        $("#localityTo").prop("disabled", false);
        
        var LocalityFrom = function () {
            var options = {};
            options.url = "/clientProfile/getLocality";
            options.type = "POST";
            options.data = JSON.stringify({ countryName: $("#CountryFrom").val() });
            options.dataType = "json";
            options.contentType = "application/json";
            options.success = function (locality) {
                $("#localityFrom").empty();

                $("#localityFrom").attr('name', 'LocalityFrom');
                for (var i = 0; i < locality.length; i++) {
                    $("#localityFrom").append("<option>" + locality[i] + "</option>");
                }
                //$("#state").prop("disabled", false);
            };
            options.error = function() { alert("Error retrieving locality!"); };
            $.ajax(options);
        }

        var LocalityTo = function () {
            var options = {};
            options.url = "/clientProfile/getLocality";
            options.type = "POST";
            options.data = JSON.stringify({ countryName: $("#CountryTo").val() });
            options.dataType = "json";
            options.contentType = "application/json";
            options.success = function (locality) {
                $("#localityTo").empty();
                $("#localityTo").attr('name', 'LocalityTo');
                for (var i = 0; i < locality.length; i++) {
                    $("#localityTo").append("<option>" + locality[i] + "</option>");
                }
                //$("#state").prop("disabled", false);
            };
            options.error = function() { alert("Error retrieving locality!"); };
            $.ajax(options);
        }

        LocalityFrom();
        LocalityTo();

        $("#CountryFrom").change(function () { LocalityFrom();});
        $("#CountryTo").change(function () { LocalityTo();});
    });


</script>




<h2>CreatePost</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>CreatePostCargoDto</h4>
        <hr />
        <div class="form-group">
            @Html.LabelFor(model => model.CountryFrom, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CountryFrom", ViewBag.CountryFrom as SelectList , 
                    htmlAttributes: new { @class = "form-control col-md-2" })
            </div>
        </div>
        <div class="form-group">
           @Html.LabelFor(model => model.LocalityFrom, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select id="localityFrom" class="form-control col-md-2"></select>
            </div>
        </div> 
        <div class="form-group">
            @Html.LabelFor(model => model.CountryTo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CountryTo", ViewBag.CountryFrom as SelectList,
                    htmlAttributes: new { @class = "form-control col-md-2" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.LocalityTo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select id="localityTo" class="form-control col-md-2"></select>
            </div>
        </div> 
        
        <div class="form-group">
            @Html.LabelFor(model => model.PostTransportType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("PostTransportType", EnumHelper.GetSelectList(typeof(PostTransportType)), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PostTransportType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateFrom, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateFrom, new { htmlAttributes = new { @class = "form-control"} })
                @Html.ValidationMessageFor(model => model.DateFrom, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateTo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateTo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DateTo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AdditionalInfo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AdditionalInfo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AdditionalInfo, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.CargoDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CargoDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CargoDescription, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CargoWeight, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CargoWeight, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CargoWeight, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.CargoVolume, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CargoVolume, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CargoVolume, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "PostList", "ClientProfile")
</div>

